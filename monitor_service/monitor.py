import os
import sys
import logging
import time
import requests
import m3u8
from urllib.parse import urljoin
import signal
import structlog
from tenacity import retry, stop_after_attempt, wait_exponential
from circuitbreaker import circuit

# Konfigurera loggning
logging.basicConfig(level=logging.INFO, format='%(asctime)s [%(levelname)-8s] %(message)s', datefmt='%Y-%m-%d %H:%M:%S')
logger = logging.getLogger(__name__)

# Global flagga f√∂r att kontrollera om vi ska forts√§tta k√∂ra
running = True

def get_settings(database_url):
    """H√§mta inst√§llningar fr√•n databasen"""
    try:
        response = requests.get(f"{database_url}/settings")
        if response.status_code == 200:
            settings = response.json()
            return {
                'monitor_interval': int(settings.get('monitor_interval', 10)),
                'alert_threshold': int(settings.get('alert_threshold', 5))
            }
        else:
            logger.error(f"‚ùå Kunde inte h√§mta inst√§llningar. Status: {response.status_code}")
            return {'monitor_interval': 10, 'alert_threshold': 5}  # Default v√§rden
    except Exception as e:
        logger.error(f"‚ùå Fel vid h√§mtning av inst√§llningar: {str(e)}")
        return {'monitor_interval': 10, 'alert_threshold': 5}  # Default v√§rden

@circuit(failure_threshold=5, recovery_timeout=60)
@retry(
    stop=stop_after_attempt(3),
    wait=wait_exponential(multiplier=1, min=4, max=10)
)
def check_stream_status(url):
    try:
        # H√§mta HLS manifest
        logger.info(f"üîç H√§mtar HLS manifest fr√•n: {url}")
        response = requests.get(url)
        response.raise_for_status()
        
        # Parsa M3U8
        m3u8_obj = m3u8.loads(response.text)
        
        # Kontrollera om det √§r en master playlist genom att kolla efter playlists
        if hasattr(m3u8_obj, 'playlists') and m3u8_obj.playlists:
            logger.info(f"Master playlist detekterad med {len(m3u8_obj.playlists)} kvalitetsniv√•er")
            
            # Kontrollera f√∂rsta variant-str√∂mmen
            variant_url = m3u8_obj.playlists[0].uri
            if not variant_url.startswith('http'):
                variant_url = url.rsplit('/', 1)[0] + '/' + variant_url
            
            logger.info(f"Kontrollerar variant-str√∂m: {variant_url}")
            variant_response = requests.get(variant_url)
            variant_response.raise_for_status()
            variant_m3u8 = m3u8.loads(variant_response.text)
            
            if hasattr(variant_m3u8, 'segments') and variant_m3u8.segments:
                logger.info(f"‚úÖ Str√∂mmen √§r aktiv med {len(variant_m3u8.segments)} segment")
                return f"Str√∂mmen √§r aktiv med {len(variant_m3u8.segments)} segment"
            else:
                logger.warning("‚ö†Ô∏è Inga segment hittades i str√∂mmen")
                return "Inga segment hittades"
        else:
            # Det √§r en media playlist
            if hasattr(m3u8_obj, 'segments') and m3u8_obj.segments:
                logger.info(f"‚úÖ Str√∂mmen √§r aktiv med {len(m3u8_obj.segments)} segment")
                return f"Str√∂mmen √§r aktiv med {len(m3u8_obj.segments)} segment"
            else:
                logger.warning("‚ö†Ô∏è Inga segment hittades i str√∂mmen")
                return "Inga segment hittades"
                
    except Exception as e:
        logger.error(f"‚ùå Fel vid kontroll av str√∂m: {e}")
        return f"Fel vid kontroll: {str(e)}"

def monitor_stream(channel_url):
    """
    √ñvervakar en HLS-str√∂m kontinuerligt.
    """
    while True:
        try:
            status = check_stream_status(channel_url)
            if status != "Str√∂mmen √§r aktiv med segment":
                logger.warning(f"‚ö†Ô∏è Problem: {status}")
            time.sleep(5)  # V√§nta 5 sekunder mellan kontroller
        except Exception as e:
            logger.error(f"‚ùå Ov√§ntat fel vid √∂vervakning av {channel_url}: {str(e)}")
            time.sleep(5)

def signal_handler(signum, frame):
    """Hantera shutdown signaler"""
    global running
    logger.info("üì• Tar emot shutdown signal...")
    running = False

def main():
    # Registrera signal handlers
    signal.signal(signal.SIGTERM, signal_handler)
    signal.signal(signal.SIGINT, signal_handler)
    
    logger.info("üöÄ Monitor service startar...")
    
    # H√§mta milj√∂variabler
    channel_url = os.getenv('CHANNEL_URL')
    if not channel_url:
        logger.error("‚ùå Ingen CHANNEL_URL angiven i milj√∂variabler")
        exit(1)
        
    while running:  # Anv√§nd running flaggan ist√§llet f√∂r True
        try:
            logger.info("\n=== Stream Status Kontroll ===")
            logger.info(f"URL: {channel_url}")
            logger.info("Kontrollintervall: 10 sekunder")
            
            status = check_stream_status(channel_url)
            logger.info(f"‚úÖ Status: {status}")
            logger.info("‚è≥ V√§ntar 10 sekunder till n√§sta kontroll...")
            logger.info("================================\n")
                
        except Exception as e:
            logger.error(f"‚ùå Fel vid kontroll av str√∂m: {e}")
        
        # Anv√§nd kortare sleep-intervaller f√∂r snabbare shutdown
        for _ in range(10):
            if not running:
                break
            time.sleep(1)
    
    logger.info("üëã Monitor service avslutas...")
    sys.exit(0)

if __name__ == "__main__":
    main()
